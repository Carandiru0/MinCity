#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

/* Copyright (C) 20xx Jason Tully - All Rights Reserved
 * You may use, distribute and modify this code under the
 * terms of the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License
 * http://www.supersinfulsilicon.com/
 *
This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/
or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 */


// ******** textureshader ********** WIND DIRECTION ************* //
// ************************************************************** //

#include "common.glsl"

#define GROUP_SIZE 8
layout (local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE, local_size_z = 1) in;

layout (push_constant) restrict readonly uniform PushConstant {
    layout(offset=0) vec2       origin;
	layout(offset=8) float		time;		// time elapsed since start
} pc;

// # of components and bitdepth can be customized per textureShader requirements
layout (binding = 0) uniform sampler2D inputMap;	// input texture map (blue noise)
layout (binding = 1, rgba16) writeonly restrict uniform image2D outputMap;	// output texture map (2D)
//////////////////////////////////////////////////////////////////////////////////

layout (constant_id = 0) const float OutputWidth = 1.0f;
layout (constant_id = 1) const float OutputHeight = 1.0f;
layout (constant_id = 2) const float InvOutputWidth = 1.0f;
layout (constant_id = 3) const float InvOutputHeight = 1.0f;
layout (constant_id = 4) const float total_number_of_frames = 1.0f;

#define OutputDimensions (vec2(OutputWidth, OutputHeight))
#define InvOutputDimensions (vec2(InvOutputWidth, InvOutputHeight))

#define BUMP_SCALE (0.03125f)

void main() 
{

#ifdef ODD_TEXTURE_DIMENSIONS
	// this is required, as 2D dimensions are not explicitly defined as square, power of 2, and divisable by local size (8) with no remainder
	{ // #### Required Bounds Check //
		if ( any(greaterThanEqual(gl_GlobalInvocationID.xy - TextureDimensions, vec2(0))) )
			return;
	}
	// else / otherwise all dispatches fit into texture dimensions
#endif

	const vec2 uv = gl_GlobalInvocationID.xy * InvOutputDimensions;

	// (shade dithered) which results in no banding artifacts when raymarched in the volumetric shader that uses this wind direction + opacity/height
	vec4 direction_height;
	direction_height.w = textureLod(inputMap, uv, 0.0f).r; // height

	vec2 gradient;

	gradient.x = textureLodOffset(inputMap, uv, 0.0f, ivec2(-1,  0)).r - textureLodOffset(inputMap, uv, 0.0f, ivec2( 1,  0)).r;
	gradient.y = textureLodOffset(inputMap, uv, 0.0f, ivec2( 0, -1)).r - textureLodOffset(inputMap, uv, 0.0f, ivec2( 0,  1)).r;
	gradient = normalize(-gradient);

	direction_height.xyz = vec3(gradient * 256.0f, 1.0f / BUMP_SCALE);
	direction_height.xyz = normalize(direction_height.xyz) * 0.5f + 0.5f;

	imageStore(outputMap, ivec2(gl_GlobalInvocationID.xy), direction_height);
}



